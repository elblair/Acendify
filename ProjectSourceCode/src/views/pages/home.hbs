<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Acendify - Home</title>
</head>
<body>
  <div class="brand-title">ACENDIFY</div>

  <div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-md-8">
          <input 
              type="text" 
              id="searchInput" 
              class="form-control" 
              placeholder="Search users and climbs..."
          >
          
          <div id="searchResults" class="mt-3">
          </div>
      </div>
  </div>
  <script>
  const searchInput = document.getElementById('searchInput');
  const searchResults = document.getElementById('searchResults');

  function debounce(func, delay) {
      let timeoutId;
      return function() {
          const context = this;
          const args = arguments;
          clearTimeout(timeoutId);
          timeoutId = setTimeout(() => {
              func.apply(context, args);
          }, delay);
      };
  const contentContainer = document.getElementById('content-container');
  let loading = false;
  let offset = 0;
  const limit = 5;
  }

  function createUserResultHTML(user) {
      return `
          <div class="result-item">
              <strong><a style="color: inherit; text-decoration: none" href="/profile/${user.user_id}">${user.full_name} | ${user.username}</a></strong>
          </div>
      `;
  }

  function createClimbResultHTML(climb) {
      return `
          <div class="result-item">
              <strong>${climb.name} | ${climb.location}</strong>
          </div>
      `;
  }

  function renderSearchResults(data) {
      let resultsHTML = '';

      if (data.users && data.users.length > 0) {
          resultsHTML += data.users.map(createUserResultHTML).join('');
      }

      if (data.users && data.users.length > 0 && data.climbs && data.climbs.length > 0) {
          resultsHTML += '<div class="search-result-separator"></div>';
      }

      if (data.climbs && data.climbs.length > 0) {
          resultsHTML += data.climbs.map(createClimbResultHTML).join('');
      }

      searchResults.innerHTML = resultsHTML;
  }

  const performSearch = debounce(async (searchString) => {
      if (!searchString.trim()) {
          searchResults.innerHTML = '';
          return;
      }

      try {
          const response = await fetch(`/api/search?searchstring=${encodeURIComponent(searchString)}&limit=5`);
          
          if (!response.ok) {
              throw new Error('Search failed');
          }

          const data = await response.json();

          renderSearchResults(data);

      } catch (error) {
          console.error('Search error:', error);
          searchResults.innerHTML = '<p class="text-danger">An error occurred during search</p>';
      }
  }, 300);

  searchInput.addEventListener('input', (e) => {
      performSearch(e.target.value);
  });
  </script>
  <div class="site-container" style="display: flex; flex-direction: column; align-items: center; justify-content: center" id="content-container"></div>
  <script>
    const contentContainer = document.getElementById('content-container');
    let loading = false;
    let offset = 0;
    const limit = 5;
    async function fetchAscents() {
      try {
        const response = await fetch(`/api/ascents?limit=${limit}&offset=${offset}`);
        console.log('Response:', response);
        if (!response.ok) throw new Error(`Error fetching ascents: ${response.statusText}`);
        const data = await response.json();
        console.log('Fetched data:', data);
        return data;
      } catch (error) {
        console.error('Fetch error:', error.message);
        return [];
      }
    }

    function createCard(ascent, climbs, users) {
      const climb = climbs.find(c => c.climb_id === ascent.climb_id);
      console.log(users)
      const user = users.find(u => u.user_id === ascent.user_id);
      const card = document.createElement('div');
      card.className = 'card';
      card.style = "";
      card.innerHTML = `
          <div class="card-header d-flex justify-content-between">
            <span class="fw-bold" style="font-size: 2rem">Climb: ${climb ? climb.name : 'Unknown'}</span>
            <a class="link-header text-decoration-none fw-bold" style="padding: 0" href="/profile/${user.user_id}">User: ${user ? user.username : 'Unknown'}</a>
          </div>
          <hr>
          <div class="card-body">
            <p><strong>Suggested Grade:</strong> V${ascent.suggested_grade || 'N/A'}</p>
            <p><strong>Rating:</strong> ${ascent.rating || 'N/A'}/5</p>
            <p><strong>Comment:</strong> ${ascent.comment || 'No comment'}</p>
          </div>
      `;

      return card;
    }

    async function loadAscents() {
      if (loading) return;
      loading = true;
      const res = await fetchAscents();

      if (res[0].length === 0) {
        loading = false;
        return;
      }
      res[0].forEach(ascent => {
        const card = createCard(ascent, res[1], res[2]);
        contentContainer.appendChild(card);
      });
      offset += limit; 
      loading = false;
    }

    window.addEventListener('scroll', () => {
      if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100 && !loading) {
        loadAscents();
      }
    });
    
    loadAscents();
  </script>

</body>
